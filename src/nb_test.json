{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "collapsed": false,
        "jupyter": {
          "outputs_hidden": false
        },
        "tags": []
      },
      "outputs": [],
      "source": [
        "print(1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "collapsed": false,
        "jupyter": {
          "outputs_hidden": false
        },
        "tags": []
      },
      "outputs": [],
      "source": [
        "import time\n",
        "for i in range(10):\n",
        " print(i + 1)\n",
        " time.sleep(1)\n",
        "1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["Cell with the hidden source and the hidden output."]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "collapsed": false,
        "jupyter": {
          "outputs_hidden": false,
          "source_hidden": false
        },
        "tags": []
      },
      "outputs": [
        {
          "ename": "SyntaxError",
          "evalue": "invalid syntax (<ipython-input-4-2ab60b0e42e0>, line 1)",
          "output_type": "error",
          "traceback": [
            "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-4-2ab60b0e42e0>\"\u001b[1;36m, line \u001b[1;32m1\u001b[0m\n\u001b[1;33m    Bot the source and the output of the cell should be hidden\u001b[0m\n\u001b[1;37m        ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": [
        "import tensorflow as tf\n",
        "print('TensorFlow version:', tf.__version__)\n",
        "print('Num GPUs Available: ', len(tf.config.list_physical_devices('GPU')))\n",
        "mnist = tf.keras.datasets.mnist\n",
        "(x_train, y_train), (x_test, y_test) = mnist.load_data()\n",
        "x_train, x_test = x_train / 255.0, x_test / 255.0\n",
        "model = tf.keras.models.Sequential([\n",
        "  tf.keras.layers.Flatten(input_shape=(28, 28)),\n",
        "  tf.keras.layers.Dense(128, activation='relu'),\n",
        "  tf.keras.layers.Dropout(0.2),\n",
        "  tf.keras.layers.Dense(10)\n",
        "])\n",
        "predictions = model(x_train[:1]).numpy()\n",
        "loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)\n",
        "model.compile(optimizer='adam',\n",
        "              loss=loss_fn,\n",
        "              metrics=['accuracy'])\n",
        "model.fit(x_train, y_train, epochs=5)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["Cell with scrolled and hidden output"]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "collapsed": false,
        "jupyter": {
          "outputs_hidden": false
        },
        "tags": []
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": ["top\n", "\n", "\n", "Middle\n", "\n", "\n", "Bottom\n"]
        }
      ],
      "source": ["print('top\\n\\n\\nMiddle\\n\\n\\nBottom')"]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["Cell with scrolled output not exceeding max height."]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "scrolled": true,
        "tags": []
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": ["top\n", "\n", "\n", " Bottom\n"]
        }
      ],
      "source": ["print('top\\n\\n\\n Bottom')"]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["Cell with scrolled output exceeding max height."]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "scrolled": true,
        "tags": []
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "top\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            "\n",
            " Bottom\n"
          ]
        }
      ],
      "source": [
        "print('top\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n Bottom')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["Cell with html output."]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "        <iframe\n",
              "            width=\"792\"\n",
              "            height=\"700\"\n",
              "            src=\"https://cs231n.github.io/assets/conv-demo/index.html\"\n",
              "            frameborder=\"0\"\n",
              "            allowfullscreen\n",
              "        ></iframe>\n",
              "        "
            ],
            "text/plain": ["<IPython.lib.display.IFrame at 0x20a5f6e82b0>"]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from IPython.display import IFrame\n",
        "IFrame('https://cs231n.github.io/assets/conv-demo/index.html', width=792, height=700)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["Empty cell."]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "ExecuteTime": {
          "end_time": "2021-06-01T16:17:53.150485Z",
          "start_time": "2021-06-01T16:17:52.841368Z"
        }
      },
      "outputs": [
        {
          "data": {
            "image/svg+xml": [
              "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n",
              "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n",
              " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n",
              "<!-- Generated by graphviz version 2.43.0 (0)\n",
              " -->\n",
              "<!-- Title: %3 Pages: 1 -->\n",
              "<svg width=\"357pt\" height=\"233pt\"\n",
              " viewBox=\"0.00 0.00 357.48 232.91\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
              "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 228.91)\">\n",
              "<title>%3</title>\n",
              "<polygon fill=\"white\" stroke=\"transparent\" points=\"-4,4 -4,-228.91 353.48,-228.91 353.48,4 -4,4\"/>\n",
              "<g id=\"clust1\" class=\"cluster\">\n",
              "<title>cluster445</title>\n",
              "<path fill=\"none\" stroke=\"black\" d=\"M112.5,-8C112.5,-8 220.5,-8 220.5,-8 226.5,-8 232.5,-14 232.5,-20 232.5,-20 232.5,-109.95 232.5,-109.95 232.5,-115.95 226.5,-121.95 220.5,-121.95 220.5,-121.95 112.5,-121.95 112.5,-121.95 106.5,-121.95 100.5,-115.95 100.5,-109.95 100.5,-109.95 100.5,-20 100.5,-20 100.5,-14 106.5,-8 112.5,-8\"/>\n",
              "<text text-anchor=\"middle\" x=\"210.5\" y=\"-15.8\" font-family=\"Times,serif\" font-size=\"14.00\">445</text>\n",
              "</g>\n",
              "<!-- beta_2 -->\n",
              "<g id=\"node1\" class=\"node\">\n",
              "<title>beta_2</title>\n",
              "<ellipse fill=\"none\" stroke=\"black\" cx=\"49.5\" cy=\"-187.43\" rx=\"49.49\" ry=\"37.45\"/>\n",
              "<text text-anchor=\"middle\" x=\"49.5\" y=\"-198.73\" font-family=\"Times,serif\" font-size=\"14.00\">beta_2</text>\n",
              "<text text-anchor=\"middle\" x=\"49.5\" y=\"-183.73\" font-family=\"Times,serif\" font-size=\"14.00\">~</text>\n",
              "<text text-anchor=\"middle\" x=\"49.5\" y=\"-168.73\" font-family=\"Times,serif\" font-size=\"14.00\">Normal</text>\n",
              "</g>\n",
              "<!-- logit -->\n",
              "<g id=\"node4\" class=\"node\">\n",
              "<title>logit</title>\n",
              "<ellipse fill=\"lightgrey\" stroke=\"black\" cx=\"166.5\" cy=\"-76.48\" rx=\"57.97\" ry=\"37.45\"/>\n",
              "<text text-anchor=\"middle\" x=\"166.5\" y=\"-87.78\" font-family=\"Times,serif\" font-size=\"14.00\">logit</text>\n",
              "<text text-anchor=\"middle\" x=\"166.5\" y=\"-72.78\" font-family=\"Times,serif\" font-size=\"14.00\">~</text>\n",
              "<text text-anchor=\"middle\" x=\"166.5\" y=\"-57.78\" font-family=\"Times,serif\" font-size=\"14.00\">Bernoulli</text>\n",
              "</g>\n",
              "<!-- beta_2&#45;&gt;logit -->\n",
              "<g id=\"edge1\" class=\"edge\">\n",
              "<title>beta_2&#45;&gt;logit</title>\n",
              "<path fill=\"none\" stroke=\"black\" d=\"M80.24,-157.8C94.31,-144.7 111.16,-129.01 126.23,-114.98\"/>\n",
              "<polygon fill=\"black\" stroke=\"black\" points=\"128.98,-117.19 133.92,-107.82 124.21,-112.07 128.98,-117.19\"/>\n",
              "</g>\n",
              "<!-- beta_1 -->\n",
              "<g id=\"node2\" class=\"node\">\n",
              "<title>beta_1</title>\n",
              "<ellipse fill=\"none\" stroke=\"black\" cx=\"166.5\" cy=\"-187.43\" rx=\"49.49\" ry=\"37.45\"/>\n",
              "<text text-anchor=\"middle\" x=\"166.5\" y=\"-198.73\" font-family=\"Times,serif\" font-size=\"14.00\">beta_1</text>\n",
              "<text text-anchor=\"middle\" x=\"166.5\" y=\"-183.73\" font-family=\"Times,serif\" font-size=\"14.00\">~</text>\n",
              "<text text-anchor=\"middle\" x=\"166.5\" y=\"-168.73\" font-family=\"Times,serif\" font-size=\"14.00\">Normal</text>\n",
              "</g>\n",
              "<!-- beta_1&#45;&gt;logit -->\n",
              "<g id=\"edge2\" class=\"edge\">\n",
              "<title>beta_1&#45;&gt;logit</title>\n",
              "<path fill=\"none\" stroke=\"black\" d=\"M166.5,-149.85C166.5,-141.67 166.5,-132.89 166.5,-124.37\"/>\n",
              "<polygon fill=\"black\" stroke=\"black\" points=\"170,-124.15 166.5,-114.15 163,-124.15 170,-124.15\"/>\n",
              "</g>\n",
              "<!-- intercept -->\n",
              "<g id=\"node3\" class=\"node\">\n",
              "<title>intercept</title>\n",
              "<ellipse fill=\"none\" stroke=\"black\" cx=\"291.5\" cy=\"-187.43\" rx=\"57.97\" ry=\"37.45\"/>\n",
              "<text text-anchor=\"middle\" x=\"291.5\" y=\"-198.73\" font-family=\"Times,serif\" font-size=\"14.00\">intercept</text>\n",
              "<text text-anchor=\"middle\" x=\"291.5\" y=\"-183.73\" font-family=\"Times,serif\" font-size=\"14.00\">~</text>\n",
              "<text text-anchor=\"middle\" x=\"291.5\" y=\"-168.73\" font-family=\"Times,serif\" font-size=\"14.00\">Normal</text>\n",
              "</g>\n",
              "<!-- intercept&#45;&gt;logit -->\n",
              "<g id=\"edge3\" class=\"edge\">\n",
              "<title>intercept&#45;&gt;logit</title>\n",
              "<path fill=\"none\" stroke=\"black\" d=\"M257.67,-156.95C242.39,-143.62 224.18,-127.75 208.07,-113.71\"/>\n",
              "<polygon fill=\"black\" stroke=\"black\" points=\"210.19,-110.92 200.35,-106.98 205.59,-116.19 210.19,-110.92\"/>\n",
              "</g>\n",
              "</g>\n",
              "</svg>\n"
            ],
            "text/plain": ["<graphviz.dot.Digraph at 0x7f18e0a99ca0>"]
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": ["pm.model_to_graphviz(manual_logistic_model)"]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.6rc1"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
}
